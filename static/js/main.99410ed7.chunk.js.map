{"version":3,"sources":["serviceWorker.js","state/Context.js","state/Provider.js","state/ThreeContext.js","state/UserContext.js","components/ThreeScape.js","components/Home.js","components/User.js","components/DUser.js","routes/Nav.js","state/ThreeProvider.js","routes/index.js","state/UserProvider.js","index.js"],"names":["Boolean","window","location","hostname","match","Context","React","createContext","state_Context","Provider","_ref","drizzle","children","_useState","useState","_useState2","Object","slicedToArray","drizzleState","setDrizzleState","_useState3","_useState4","initialized","setInitialized","useEffect","drizzUnsub","store","subscribe","getState","drizzleStatus","react_default","a","createElement","value","options","contracts","web3","fallback","type","url","drizzleStore","generateStore","Drizzle","ThreeContext","UserContext","THREE","ThreeScape","shroomArray","sporeArray","userContext","useContext","shroomRefs","useRef","sporeRefs","_useContext","scene","camera","cancelAnimator","container","animator","getCaughtSpores","getShroomsShown","objArray","shroomsShown","raycaster","loadNewShroom","mouse","_ref2","asyncToGenerator","regenerator_default","mark","_callee2","shroom","i","loader","wrap","_context2","prev","next","ObjectLoader","load","_ref3","_callee","obj","_context","console","log","material","color","position","x","y","z","add","current","push","id","stop","_x3","apply","this","arguments","_x","_x2","undefined","length","sShown","includes","geometry","SphereGeometry","MeshBasicMaterial","transparent","sphere","Mesh","clone","chroma","random","Color","opacity","Math","sporeId","bData","style","display","document","querySelector","set","light","AmbientLight","o","timer","Date","now","cos","sin","rotation","PI","JSON","stringify","spores","Home","DrizzleContext","setShroomArray","setSporeArray","hyphaeAddress","toadAddress","Mycelium","methods","hyphaes","call","sent","addContract","contractName","web3Contract","eth","Contract","Hyphae","abi","toads","Toadstool","initContracts","synced","toadstool","shroomLength","sArray","shroomObj","getShroomsLength","getShroom","createShroomArray","hyphae","_callee3","spore","_context3","getSpore","components_ThreeScape","styled","div","_templateObject","h1","_templateObject2","_templateObject3","_templateObject4","_templateObject5","props","concat","DUser_templateObject","DUser_templateObject2","DUser_templateObject3","DUser_templateObject4","DUser_templateObject5","Link","Nav_templateObject","LinkWrapper","Nav_templateObject2","LinkContainer","Nav_templateObject3","Nav","react","defaultCamera","PerspectiveCamera","innerWidth","innerHeight","Scene","renderer","WebGLRenderer","getElementById","controls","OrbitControls","domElement","autoRotate","Raycaster","Vector2","ThreeProvider","myReq","firstClick","explosionRef","caughtSpores","updateCaughtSpores","addSpore","mouseClick","event","clientX","clientY","touches","addEventListener","aspect","updateProjectionMatrix","setSize","appendChild","cancelAnimationFrame","state_ThreeContext","innerFunction","animate","time","requestAnimationFrame","setFromCamera","intersects","intersectObjects","iObj","object","r","g","b","scale","internalTimer","splice","update","render","removeEventListener","ref","Routes","routes_Nav","Home_Home","defaultSpores","UserProvider","setSpores","state_UserContext","newSpores","ReactDOM","state_UserProvider","state_ThreeProvider","state_Provider","routes","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99410ed7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nconst Context = React.createContext();\n\nconst Provider = ({ drizzle, children }) => {\n  const [drizzleState, setDrizzleState] = useState(null);\n  const [initialized, setInitialized] = useState(false);\n\n  useEffect(() => {\n    const drizzUnsub = drizzle.store.subscribe(() => {\n      const drizzleState = drizzle.store.getState();\n      if (drizzleState.drizzleStatus.initialized) {\n        setInitialized(true);\n        setDrizzleState(drizzleState);\n      }\n    });\n\n    return () => {\n      drizzUnsub();\n    };\n  }, [drizzle]);\n\n  return (\n    <Context.Provider\n      value={{\n        drizzle,\n        drizzleState,\n        initialized\n      }}\n    >\n      {children}\n    </Context.Provider>\n  );\n};\nexport default {\n  Context,\n  Provider\n};\n","import React from \"react\";\nimport { Drizzle, generateStore } from \"drizzle\";\nimport Context from \"./Context\";\nimport Mycelium from \"../contracts/Mycelium.json\";\nconst options = {\n  contracts: [Mycelium],\n  web3: {\n    fallback: {\n      type: \"ws\",\n      url: \"wss://ropsten.infura.io/ws\"\n    }\n  }\n};\n\nconst drizzleStore = generateStore(options);\nconst drizzle = new Drizzle(options, drizzleStore);\n\nconst Provider = ({ children }) => {\n  return <Context.Provider drizzle={drizzle}>{children}</Context.Provider>;\n};\n\nexport default Provider;\n","import React from \"react\";\n\nconst ThreeContext = React.createContext();\nexport default ThreeContext;\n","import React from \"react\";\n\nconst UserContext = React.createContext();\n\nexport default UserContext;\n","import React, { useContext, useEffect, useRef } from \"react\";\nimport ThreeContext from \"../state/ThreeContext\";\nimport UserContext from \"../state/UserContext\";\nimport chroma from \"chroma-js\";\nconst THREE = window.THREE;\n\n// const randNum = (min, max) => Math.floor(Math.random() * (max - min)) + min;\n\nexport const ThreeScape = ({ shroomArray, sporeArray }) => {\n  const userContext = useContext(UserContext);\n  const shroomRefs = useRef([]);\n  const sporeRefs = useRef([]);\n  const {\n    scene,\n    camera,\n    cancelAnimator,\n    container,\n    animator,\n    getCaughtSpores,\n    getShroomsShown,\n    objArray,\n    raycaster,\n    shroomsShown,\n    mouse\n  } = useContext(ThreeContext);\n  const loadNewShroom = async (shroom, i) => {\n    const loader = new THREE.ObjectLoader();\n    await loader.load(\"./blacky.json\", async obj => {\n      console.log(shroom);\n      obj.children[0].material.color = shroom;\n      obj.position.x += i / 2;\n      obj.position.y += i / 2;\n      obj.position.z += i / 2;\n      scene.add(obj);\n      objArray.current.push(obj);\n      shroomsShown.current.push(shroom.id);\n    });\n  };\n\n  useEffect(\n    () => {\n      if (shroomArray.length === undefined) return;\n      if (shroomRefs.current.length === shroomArray.length) return;\n      const sShown = getShroomsShown();\n      for (let i = shroomRefs.current.length; i < shroomArray.length; i++) {\n        if (!sShown.current.includes(shroomArray[i].id)) {\n          loadNewShroom(shroomArray[i], i);\n        }\n      }\n      shroomRefs.current = shroomArray;\n      console.log(shroomRefs.current);\n      console.log(\"shroomeffect\", scene);\n    },\n    // eslint-disable-next-line\n    [shroomArray, scene]\n  );\n\n  useEffect(() => {\n    if (sporeArray.length === undefined) return;\n    if (sporeRefs.current.length === sporeArray.length) return;\n    const geometry = new THREE.SphereGeometry(1, 10, 10);\n    const material = new THREE.MeshBasicMaterial({\n      transparent: true\n    });\n\n    const caughtSpores = getCaughtSpores();\n    if (caughtSpores.length === 0) {\n      for (let i = sporeRefs.current.length; i < sporeArray.length; i++) {\n        const sphere = new THREE.Mesh(geometry.clone(), material.clone());\n        const randomColor = chroma.random();\n        sphere.material.color = new THREE.Color(chroma.random());\n        // sphere.material.color = sporeArray[i];\n\n        sphere.material.opacity = Math.random();\n        sphere.position.z = Math.random() * 12 - 5;\n        sphere.sporeId = i;\n        sphere.bData = sporeArray[i];\n        scene.add(sphere);\n        objArray.current.push(sphere);\n        sporeRefs.current = sporeArray;\n      }\n    }\n  });\n\n  useEffect(() => {\n    console.log(\"scene effect\", scene);\n    container.current.style.display = \"block\";\n    document.querySelector(\"canvas\").style.display = \"block\";\n    camera.position.set(0, 1, -20);\n    window.camera = camera;\n\n    var light = new THREE.AmbientLight(\"pink\"); // soft white light\n    scene.add(light);\n    // this by nature can't be dynamic because I am a fucking dumb ass\n    const objLoop = o => {\n      const objArray = o.current;\n      if (objArray.length > 0) {\n        for (let i = 0; i < objArray.length; i++) {\n          var timer = 0.0001 * Date.now();\n          const sphere = objArray[i];\n          sphere.position.x = 10 * Math.cos(timer + i);\n          sphere.position.y = 10 * Math.sin(timer + i * 1.1);\n\n          // need some sort of random motion?\n          const a = 15;\n          const p = 1;\n          const v = 0.02;\n          // objArray[i].position.y += a * Math.sin(Date.now() * Math.PI * v) * p;\n          // objArray[i].position.x += a * Math.sin(Date.now() * Math.PI * v) * p;\n          // objArray[i].position.z =\n          //   a * Math.sin(Date.now() * Math.PI * v) + i * p;\n          // objArray[i].scale.y +=\n          //   0.001 * Math.sin(Date.now() * Math.PI * 0.000001);\n          // objArray[i].scale.x +=\n          //   0.001 * Math.sin(Date.now() * Math.PI * 0.0001) * i;\n\n          objArray[i].rotation.y +=\n            0.01 * Math.sin(Date.now() * Math.PI * 0.000001);\n          objArray[i].rotation.x +=\n            0.01 * Math.sin(Date.now() * Math.PI * 0.000001) * i;\n        }\n      }\n      // const intersects = raycaster.intersectObjects(scene.children);\n      // // if (firstClick.current) {\n      // for (let i = 0; i < intersects.length; i++) {\n      //   const iObj = intersects[i].object;\n      //   iObj.material.color = { r: 255, g: 0, b: 255 };\n      //   // if (!caughtSpores.current.includes(iObj.sporeId)) {\n      //   //   caughtSpores.current.push(iObj.sporeId);\n      //   //   // updateCaughtSpores();\n      //   // }\n      //   // }\n      // }\n      // mouse.x = 99999;\n      // mouse.y = 99999;\n    };\n    animator(objLoop);\n    return () => console.log(\"dismounted\");\n    // eslint-disable-next-line\n  }, [scene]);\n\n  useEffect(() => {\n    console.log(\"mount\");\n    // window.addEventListener(\n    //   \"click\",\n    //   setCaughtSporeArray(updateCaughtSpores),\n    //   false\n    // );\n    return () => {\n      console.log(\"dismount\");\n      document.querySelector(\"canvas\").style.display = \"none\";\n      cancelAnimator();\n    };\n    // eslint-disable-next-line\n  }, []);\n  return <div>{JSON.stringify(userContext.spores)}</div>;\n};\n\nexport default ThreeScape;\n","import React, { useEffect, useContext, useState } from \"react\";\nimport DrizzleContext from \"../state/Context\";\nimport ThreeScape from \"./ThreeScape\";\nimport Hyphae from \"../contracts/Hyphae.json\";\nimport Toadstool from \"../contracts/Toadstool.json\";\n\nexport const Home = () => {\n  const { drizzle, drizzleState } = useContext(DrizzleContext.Context);\n  const [shroomArray, setShroomArray] = useState([]);\n  const [sporeArray, setSporeArray] = useState([]);\n\n  const hyphaeIndex = 0;\n  const toadstoolIndex = 0;\n  console.log(\"HOME\");\n  useEffect(() => {\n    const initContracts = async () => {\n      const hyphaeAddress = await drizzle.contracts.Mycelium.methods\n        .hyphaes(hyphaeIndex)\n        .call();\n      drizzle.addContract({\n        contractName: \"Hyphae\",\n        web3Contract: new drizzle.web3.eth.Contract(Hyphae.abi, hyphaeAddress)\n      });\n\n      const toadAddress = await drizzle.contracts.Mycelium.methods\n        .toads(toadstoolIndex)\n        .call();\n      drizzle.addContract({\n        contractName: \"Toadstool\",\n        web3Contract: new drizzle.web3.eth.Contract(Toadstool.abi, toadAddress)\n      });\n    };\n    initContracts();\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    if (\n      !drizzle.contracts.Toadstool ||\n      !drizzleState.contracts.Toadstool.synced\n    )\n      return;\n    const toadstool = drizzle.contracts.Toadstool;\n    const createShroomArray = async () => {\n      const shroomLength = await toadstool.methods.getShroomsLength().call();\n      const sArray = [];\n      for (let i = 0; i < shroomLength; i++) {\n        const shroomObj = await toadstool.methods.getShroom(i).call();\n        sArray.push(shroomObj);\n      }\n      setShroomArray(sArray);\n    };\n    createShroomArray();\n  }, [drizzleState, drizzle.contracts.Toadstool]);\n\n  useEffect(() => {\n    if (!drizzle.contracts.Hyphae || !drizzleState.contracts.Hyphae.synced)\n      return;\n    const hyphae = drizzle.contracts.Hyphae;\n    const getSpore = async () => {\n      const sArray = [];\n      for (let i = 0; i < 30; i++) {\n        const spore = await hyphae.methods.getSpore(i).call();\n        sArray.push(spore);\n      }\n      setSporeArray(sArray);\n    };\n    getSpore();\n  }, [drizzleState, drizzle.contracts.Hyphae]);\n\n  return (\n    <div>\n      <ThreeScape shroomArray={shroomArray} sporeArray={sporeArray} />\n    </div>\n  );\n};\n","import React, { useContext, useState } from \"react\";\nimport DrizzleContext from \"../state/Context\";\nimport UserContext from \"../state/UserContext\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: 20% 1fr 20%;\n  color: white;\n  font-family: \"Open Sans\", sans-serif;\n  justify-content: center;\n`;\n\nconst Header = styled.h1`\n  grid-column-start: 2;\n  text-align: center;\n  font-size: 60px;\n`;\n\nconst SporeRow = styled.div`\n  grid-column-start: 2;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  align-items: center;\n  border: 1px white dotted;\n  padding: 5%;\n  font-size: 30px;\n\n  > div,\n  input {\n    margin: auto;\n  }\n`;\n\nconst TransmuteButton = styled.div`\n  grid-column-start: 2;\n  background: red;\n  width: 200px;\n  height: 100px;\n  border: 2px white solid;\n  font-size: 20px;\n  line-height: 100px;\n  text-align: center;\n  cursor: pointer;\n  user-select: none;\n`;\n\nconst ColorCircle = styled.div`\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  /* background: ${props =>\n    `rgb(${props.color[0]}, ${props.color[1]}, ${props.color[2]})`}; */\n    background: ${props => `${props.color}`};\n`;\n\nconst COLOR_PALETTE = [\"#2d3561\", \"#c05c7e\", \"#f3826f\", \"#ffb961\"];\nconst User = () => {\n  const [checkedSpores, setCheckedSpores] = useState([]);\n  const { spores } = useContext(UserContext);\n  const { drizzle, drizzleState } = useContext(DrizzleContext.Context);\n\n  const onChange = e => {\n    const sporeId = parseInt(e.target.id.replace(\"check-\", \"\"));\n    if (e.target.checked) {\n      const checkedSpore = spores[0].filter(s => s.id === sporeId)[0];\n      setCheckedSpores([...checkedSpores, checkedSpore]);\n    } else {\n      setCheckedSpores(checkedSpores.filter((s, i) => s.id !== sporeId));\n    }\n  };\n\n  const Transhroomtation = () => {\n    const colorArray = checkedSpores.map(s => s.bData);\n\n    const reducedColors = colorArray.reduce(\n      (allColors, obj) => {\n        const redChannel = parseInt(allColors.r) + parseInt(obj.r);\n        const blueChannel = parseInt(allColors.b) + parseInt(obj.b);\n        const greenChannel = parseInt(allColors.g) + parseInt(obj.g);\n\n        allColors.r = redChannel;\n        allColors.g = greenChannel;\n        allColors.b = blueChannel;\n        return allColors;\n      },\n      { r: 0, g: 0, b: 0 }\n    );\n\n    const pKey =\n      \"0x\" +\n      \"beac553814373bee4735f6dffe1ecbf6f4d37e8248a58ad91885f4f9fe384dcd\".toUpperCase();\n    const account = drizzle.web3.eth.accounts.privateKeyToAccount(pKey);\n    drizzle.web3.eth.accounts.wallet.add(account);\n    drizzle.web3.eth.defaultAccount = account.address;\n    const mycelium = drizzle.contracts.Mycelium;\n    const tx = mycelium.methods.mintToad.cacheSend(\n      reducedColors.r,\n      reducedColors.g,\n      reducedColors.b,\n      {\n        from: drizzle.web3.eth.defaultAccount,\n        gas: 750000,\n        gasPrice: drizzle.web3.utils.toWei(\"300\", \"gwei\")\n      }\n    );\n    console.log(tx);\n  };\n\n  return (\n    <Container>\n      <Header>PROFILE</Header>\n      {spores.length > 0 &&\n        spores[0].map((r, i) => (\n          <SporeRow key={\"spore\" + i}>\n            <input id={`check-${r.id}`} onChange={onChange} type=\"checkbox\" />\n            <div>{r.id}</div>\n            {/* <ColorCircle color={[r.bData.r, r.bData.g, r.bData.b]} /> */}\n            <ColorCircle color={COLOR_PALETTE[i]} />\n          </SporeRow>\n        ))}\n      <TransmuteButton onClick={Transhroomtation}>TRANSMUTE</TransmuteButton>\n    </Container>\n  );\n};\n\nexport default User;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport DrizzleContext from \"../state/Context\";\nimport ThreeContext from \"../state/ThreeContext\";\nimport styled from \"styled-components\";\nimport chroma from \"chroma-js\";\nconst THREE = window.THREE;\n\nconst Container = styled.div`\n  display: flex;\n  /* grid-template-columns: 20% 1fr 20%; */\n  flex-direction: row;\n  flex-wrap: wrap;\n  color: white;\n  font-family: \"Open Sans\", sans-serif;\n  justify-content: center;\n`;\n\nconst Header = styled.h1`\n  grid-column-start: 2;\n  text-align: center;\n  font-size: 60px;\n`;\n\nconst SporeRow = styled.div`\n  grid-column-start: 2;\n  display: grid;\n  grid-template-columns: 1fr;\n  align-items: center;\n  /* border: 1px white dotted; */\n  padding: 5%;\n  font-size: 30px;\n  border-radius: 50%;\n\n  > div,\n  input {\n    margin: auto;\n  }\n\n  &.red {\n    background: red;\n  }\n`;\n\nconst TransmuteButton = styled.div`\n  margin: 10px;\n  grid-column-start: 2;\n  width: 200px;\n  height: 100px;\n  border: 2px white solid;\n  font-size: 20px;\n  line-height: 100px;\n  text-align: center;\n  cursor: pointer;\n  user-select: none;\n  background: ${props => `${props.color}`};\n`;\n\nconst ColorCircle = styled.div`\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  /* background: ${props =>\n    `rgb(${props.color[0]}, ${props.color[1]}, ${props.color[2]})`}; */\n    background: ${props => `${props.color}`};\n`;\n\nconst INITIAL_PALETTE = [\"#2d3561\", \"#c05c7e\", \"#f3826f\", \"#ffb961\"];\nfunction hexToRgb(hex) {\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result\n    ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n      }\n    : null;\n}\nconst DUser = () => {\n  const [checkedSpores, setCheckedSpores] = useState([]);\n  const { drizzle, drizzleState } = useContext(DrizzleContext.Context);\n  const [COLOR_PALETTE, setColors] = useState(INITIAL_PALETTE);\n\n  const [transmuteText, setTransmuteText] = useState(\"TRANSMUTE\");\n\n  const {\n    scene,\n    camera,\n    cancelAnimator,\n    container,\n    animator,\n    getCaughtSpores,\n    getShroomsShown,\n    objArray,\n    raycaster,\n    shroomsShown,\n    mouse\n  } = useContext(ThreeContext);\n\n  const loadNewShroom = async (shroom, i) => {\n    const loader = new THREE.ObjectLoader();\n    await loader.load(\"./blacky.json\", async obj => {\n      console.log(shroom);\n      obj.children[0].material.color = shroom;\n      // obj.position.x += i / 2;\n      // obj.position.y += i / 2;\n      // obj.position.z += i / 2;\n      scene.add(obj);\n      objArray.current.push(obj);\n      shroomsShown.current.push(shroom.id);\n    });\n  };\n\n  const onChange = e => {\n    console.log(e.target);\n    const sporeId = parseInt(e.target.id.replace(\"check-\", \"\"));\n    if (!checkedSpores.includes(sporeId)) {\n      setCheckedSpores([...checkedSpores, sporeId]);\n    } else {\n      setCheckedSpores(checkedSpores.filter(s => s !== sporeId));\n    }\n  };\n  const mix = () => {\n    const colorz = checkedSpores.map(s => {\n      const el = document.getElementById(\"check-\" + s);\n      const color = el.getAttribute(\"color\");\n\n      return hexToRgb(color);\n    });\n    const colorArray = checkedSpores.map(s => s.bData);\n    const reducedColors = colorz.reduce(\n      (allCs, o, i) => {\n        if (i === 0) return o;\n        console.log(o, i);\n        const mixedColor = chroma.blend(allCs, o, \"multiply\");\n        return {\n          r: mixedColor._rgb[0] * 10,\n          g: mixedColor._rgb[1] * 10,\n          b: mixedColor._rgb[2] * 10\n        };\n      },\n      { r: 0, b: 0, g: 0 }\n    );\n    loadNewShroom(reducedColors);\n  };\n  const Transhroomtation = () => {\n    setTransmuteText(\"TRANSMUTING...\");\n    setTimeout(() => setTransmuteText(\"TRANSMUTE\"), 10000);\n    const colorz = checkedSpores.map(s => {\n      const el = document.getElementById(\"check-\" + s);\n      const color = el.getAttribute(\"color\");\n\n      return hexToRgb(color);\n    });\n    const colorArray = checkedSpores.map(s => s.bData);\n    const reducedColors = colorz.reduce(\n      (allCs, o, i) => {\n        if (i === 0) return o;\n        console.log(o, i);\n        const mixedColor = chroma.blend(allCs, o, \"multiply\");\n        return {\n          r: mixedColor._rgb[0] * 10,\n          g: mixedColor._rgb[1] * 10,\n          b: mixedColor._rgb[2] * 10\n        };\n      },\n      { r: 0, b: 0, g: 0 }\n    );\n    const pKey =\n      \"0x\" +\n      \"C835422EC7427468E1C8A95B1BECE688E01DE481D26F66AEF672801EEE3AD875\".toUpperCase();\n    const account = drizzle.web3.eth.accounts.privateKeyToAccount(pKey);\n    drizzle.web3.eth.accounts.wallet.add(account);\n    drizzle.web3.eth.defaultAccount = account.address;\n    const mycelium = drizzle.contracts.Mycelium;\n    const tx = mycelium.methods.mintToad.cacheSend(\n      reducedColors.r,\n      reducedColors.g,\n      reducedColors.b,\n      {\n        from: drizzle.web3.eth.defaultAccount,\n        gas: 750000,\n        gasPrice: drizzle.web3.utils.toWei(\"300\", \"gwei\")\n      }\n    );\n    console.log(tx);\n  };\n\n  const changeColorz = () => {\n    const one = chroma.random();\n    const two = chroma.random();\n    const three = chroma.random();\n    const four = chroma.random();\n    const newColors = [one, two, three, four];\n    setColors(newColors);\n  };\n\n  useEffect(() => {\n    console.log(\"scene effect\", scene);\n    container.current.style.display = \"block\";\n    const canvas = document.querySelector(\"canvas\");\n    canvas.style.display = \"block\";\n    canvas.style.height = window.innerHeight / 2 + \"px\";\n    canvas.style.width = \"100%\";\n    camera.position.set(0, 1, -10);\n\n    var light = new THREE.AmbientLight(\"pink\"); // soft white light\n    scene.add(light);\n    // this by nature can't be dynamic because I am a fucking dumb ass\n    const objLoop = o => {\n      const objArray = o.current;\n      if (objArray.length > 0) {\n        for (let i = 0; i < objArray.length; i++) {\n          var timer = 0.0001 * Date.now();\n          // const sphere = objArray[i];\n          // sphere.position.x = 10 * Math.cos(timer + i);\n          // sphere.position.y = 10 * Math.sin(timer + i * 1.1);\n\n          // // need some sort of random motion?\n          // const a = 15;\n          // const p = 1;\n          // const v = 0.02;\n\n          // objArray[i].scale.y +=\n          //   0.01 * Math.sin(Date.now() * Math.PI * 0.00001);\n          // objArray[i].scale.x +=\n          //   0.01 * Math.sin(Date.now() * Math.PI * 0.0001) * i;\n\n          // objArray[i].rotation.y +=\n          //   0.01 * Math.sin(Date.now() * Math.PI * 0.00001);\n          // objArray[i].rotation.x +=\n          //   0.01 * Math.sin(Date.now() * Math.PI * 0.0001) * i;\n        }\n      }\n    };\n    animator(objLoop);\n    loadNewShroom({ r: 10, g: 10, b: 100 });\n    return () => console.log(\"dismounted\");\n    // eslint-disable-next-line\n  }, [scene]);\n\n  return (\n    <div>\n      <Container>\n        {/* <Header>PROFILE</Header> */}\n        {[0, 1, 2, 3].map((r, i) => (\n          <SporeRow\n            key={\"spore\" + i}\n            className={checkedSpores.includes(i) ? \"red\" : \"black\"}\n          >\n            {/* <input id={`check-${r.id}`} onChange={onChange} type=\"checkbox\" />\n          <div>{r.id}</div> */}\n            {/* <ColorCircle color={[r.bData.r, r.bData.g, r.bData.b]} /> */}\n            <ColorCircle\n              onClick={onChange}\n              id={`check-${i}`}\n              color={COLOR_PALETTE[i]}\n            />\n          </SporeRow>\n        ))}\n      </Container>\n      <Container>\n        <TransmuteButton onClick={changeColorz}>CHANGE_COLORZ</TransmuteButton>\n        <TransmuteButton onClick={mix}>MIX</TransmuteButton>\n        <TransmuteButton\n          onClick={\n            transmuteText === \"TRANSMUTING...\"\n              ? console.log(\"nope\")\n              : Transhroomtation\n          }\n          color={transmuteText === \"TRANSMUTING...\" && \"red\"}\n        >\n          {transmuteText}\n        </TransmuteButton>\n      </Container>\n    </div>\n  );\n};\n\nexport default DUser;\n","import React, { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport AliceProfile from \"../components/svg/AliceProfile\";\nimport ShroomHouse from \"../components/svg/ShroomHouse\";\n\nconst StyledLink = styled(Link)`\n  color: red;\n`;\n\nconst LinkWrapper = styled.div`\n  position: relative;\n  padding: 1rem;\n`;\n\nconst LinkContainer = styled.div`\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  width: 150px;\n`;\n\nexport const Nav = () => {\n  return (\n    <Fragment>\n      <LinkContainer>\n        <LinkWrapper>\n          {/* <StyledLink to=\"/duser\">\n            <AliceProfile />\n          </StyledLink> */}\n        </LinkWrapper>\n        <LinkWrapper>\n          {/* <StyledLink to=\"/\">\n            <ShroomHouse />\n          </StyledLink> */}\n        </LinkWrapper>\n      </LinkContainer>\n    </Fragment>\n  );\n};\n\nexport default Nav;\n","import React, { useEffect, useRef, useContext } from \"react\";\nimport ThreeContext from \"./ThreeContext\";\nimport UserContext from \"./UserContext\";\nconst THREE = window.THREE;\nconst defaultCamera = new THREE.PerspectiveCamera(\n  75,\n  window.innerWidth / window.innerHeight,\n  0.1,\n  10000\n);\nconst scene = new THREE.Scene();\nconst camera = defaultCamera;\nconst renderer = new THREE.WebGLRenderer(document.getElementById(\"screen\"));\nconst controls = new THREE.OrbitControls(camera, renderer.domElement);\ncontrols.autoRotate = true;\n\nconst raycaster = new THREE.Raycaster();\nconst mouse = new THREE.Vector2();\n\nconst ThreeProvider = ({ children }) => {\n  const userContext = useContext(UserContext);\n  const container = useRef();\n  const firstClick = useRef(false);\n\n  const explosionRef = useRef([]);\n\n  const objArray = useRef([]);\n  const updateObjArray = () => {\n    return objArray;\n  };\n\n  const shroomsShown = useRef([]);\n  const getShroomsShown = () => {\n    return shroomsShown;\n  };\n\n  const caughtSpores = useRef([]);\n  const updateCaughtSpores = () => {\n    userContext.addSpore(caughtSpores.current);\n  };\n  const getCaughtSpores = () => {\n    return caughtSpores.current;\n  };\n\n  const mouseClick = event => {\n    let x = event.clientX;\n    let y = event.clientY;\n    if (event.touches && event.touches.length > 0) {\n      x = event.touches[0].clientX;\n      y = event.touches[0].clientY;\n    }\n    mouse.x = (x / window.innerWidth) * 2 - 1;\n    mouse.y = -(y / window.innerHeight) * 2 + 1;\n    firstClick.current = true;\n  };\n\n  window.addEventListener(\"mouseup\", mouseClick, false);\n  window.addEventListener(\"touchend\", mouseClick, false);\n\n  function onWindowResize() {\n    console.log(\"resize\");\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n  window.addEventListener(\"resize\", onWindowResize, false);\n\n  let myReq;\n  useEffect(() => {\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    container.current.appendChild(renderer.domElement);\n\n    return () => {\n      window.cancelAnimationFrame(myReq);\n    };\n  }, [container, myReq]);\n\n  const cancelAnimator = () => {\n    window.cancelAnimationFrame(myReq);\n    updateCaughtSpores();\n    window.removeEventListener(\"mousedown\", mouseClick, false);\n  };\n\n  const exploder = () => {};\n\n  const animator = innerFunction => {\n    const animate = () => {\n      let time = Date.now() * 0.0001;\n      myReq = requestAnimationFrame(animate);\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(scene.children);\n      if (firstClick.current) {\n        for (let i = 0; i < intersects.length; i++) {\n          const iObj = intersects[i].object;\n          iObj.material.color = { r: 255, g: 0, b: 255 };\n          if (!caughtSpores.current.includes(iObj)) {\n            caughtSpores.current.push(iObj);\n            explosionRef.current.push(iObj);\n          }\n        }\n      }\n      for (let i = 0; i < explosionRef.current.length; i++) {\n        const o = explosionRef.current[i];\n        o.scale.x += Math.sin(time * 0.001);\n        o.scale.y += Math.sin(time * 0.001);\n        o.scale.z += Math.sin(time * 0.001);\n        o.material.opacity -= 0.01;\n        o.internalTimer += 1;\n        if (o.material.opacity < 0) {\n          explosionRef.current.splice(i, 1);\n        }\n      }\n      // exploder();\n      mouse.x = 99999;\n      mouse.y = 99999;\n      if (controls) controls.update();\n      const objs = updateObjArray();\n      innerFunction(objs);\n      renderer.render(scene, camera);\n    };\n    animate();\n  };\n  return (\n    <ThreeContext.Provider\n      value={{\n        animator,\n        camera,\n        cancelAnimator,\n        controls,\n        container,\n        getCaughtSpores,\n        getShroomsShown,\n        objArray,\n        mouse,\n        raycaster,\n        renderer,\n        scene,\n        shroomsShown,\n        // setCamera,\n        // setControls,\n        // setMouse,\n        // setRayCaster,\n        // setRenderer,\n        // setScene,\n        updateCaughtSpores\n      }}\n    >\n      <div style={{ display: \"none\" }} ref={container} />\n      {/* <div ref={sporeDiv} /> */} {children}\n    </ThreeContext.Provider>\n  );\n};\nexport default ThreeProvider;\n","import React, { Fragment, useContext } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { Home } from \"../components/Home\";\nimport DrizzleContext from \"../state/Context\";\nimport User from \"../components/User\";\nimport DUser from \"../components/DUser\";\nimport Nav from \"./Nav\";\nimport ThreeProvider from \"../state/ThreeProvider\";\n\nconst Routes = () => {\n  const { initialized, drizzleState } = useContext(DrizzleContext.Context);\n  return (\n    <div>\n      {!initialized || !drizzleState ? (\n        <div>loading</div>\n      ) : (\n        <Fragment>\n          <Nav />\n          {/* <Route exact path=\"/duser\" component={DUser} /> */}\n          <Home />\n          {/* <Route exact path=\"/\" component={Home} /> */}\n          {/* <Route exact path=\"/user\" component={User} /> */}\n        </Fragment>\n      )}\n      }\n    </div>\n  );\n};\nexport default Routes;\n","import React, { useState } from \"react\";\nimport UserContext from \"./UserContext\";\n\nconst defaultSpores = [\n  [\n    { bData: { r: 255, g: 0, b: 0 }, id: 0 },\n    { bData: { r: 255, g: 255, b: 0 }, id: 1 },\n    { bData: { r: 255, g: 0, b: 255 }, id: 2 }\n  ]\n];\n\nconst UserProvider = ({ children }) => {\n  const [spores, setSpores] = useState(defaultSpores);\n  const addSpore = newSpores => {\n    setSpores([newSpores]);\n  };\n  return (\n    <UserContext.Provider value={{ spores, setSpores, addSpore }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport default UserProvider;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Provider from \"./state/Provider\";\n// import { BrowserRouter as Router } from \"react-router-dom\";\nimport Routes from \"./routes\";\nimport ThreeProvider from \"./state/ThreeProvider\";\nimport UserProvider from \"./state/UserProvider\";\n\nReactDOM.render(\n  <UserProvider>\n    <ThreeProvider>\n      <Provider>\n        {/* <Router> */}\n        <Routes />\n        {/* </Router> */}\n      </Provider>\n    </ThreeProvider>\n  </UserProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}